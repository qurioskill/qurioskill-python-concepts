{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the QurioSkill Python Specialization Guide","text":"<p>Welcome to your learning journey with QurioSkill's Python Specialization! This guide is designed to help you master the core concepts of Python in a structured, beginner-friendly way.</p> <p>Whether you're new to programming or brushing up on your skills, this guide will walk you through Python fundamentals using clear explanations and practical examples.</p>"},{"location":"#whats-inside","title":"\ud83d\udcd8 What's Inside?","text":"<p>This guide is organized into focused sections, each available as a separate page:</p> <ul> <li>Variables: Understand how to store and manage data.</li> <li>Data Types: Learn about integers, floats, strings, and booleans\u2014plus the operators used with each.</li> <li>Functions: Discover how to create reusable blocks of code for cleaner, more efficient programming.</li> </ul>"},{"location":"#how-to-use-this-guide","title":"\ud83d\ude80 How to Use This Guide","text":"<ul> <li>Start from the top: Each topic builds on the previous one, so it\u2019s best to go in order.</li> <li>Try the examples: Copy and run the code in your own Python environment (like replit.com, VS Code, or Jupyter Notebooks).</li> <li>Take notes: Write down what each example does and test your understanding by modifying the code.</li> <li>Practice often: Use the concepts in your own mini-projects or practice exercises.</li> </ul>"},{"location":"#who-is-this-for","title":"\ud83c\udfaf Who Is This For?","text":"<p>This guide is perfect for:</p> <ul> <li>Beginners learning to code with Python</li> <li>Students taking QurioSkill\u2019s Python workshops</li> <li>Anyone looking for a quick refresher on Python basics</li> </ul>"},{"location":"#what-will-you-learn","title":"\ud83e\udde0 What Will You Learn?","text":"<p>By the end of this guide, you\u2019ll be able to:</p> <ul> <li>Declare and manipulate variables</li> <li>Understand and apply Python data types</li> <li>Write and use your own functions</li> <li>Build a strong foundation for advanced Python topics</li> </ul>"},{"location":"#about-qurioskill","title":"About QurioSkill","text":"<p>At QurioSkill, our mission is to deliver exceptional skill-learning experiences that seamlessly integrate into even the busiest of lives. Our Python Specialization is part of that commitment\u2014designed to be clear, concise, and practical for learners across the globe.</p>"},{"location":"arithmitic/","title":"Python Arithmetic Data Types","text":"<p>Python provides several built-in data types that can be used to represent numbers and perform arithmetic operations.</p>"},{"location":"arithmitic/#1-integers-int","title":"1. Integers (<code>int</code>)","text":"<p>An integer is a whole number without decimals. It can be positive, negative, or zero.</p> <p>Examples:</p> <pre><code>x = 10\ny = -5\nz = 0\n\nprint(type(x))  # &lt;class 'int'&gt;\n</code></pre> <p>Python can handle very large integers without any special syntax.</p>"},{"location":"arithmitic/#integer-operations","title":"Integer Operations","text":"<pre><code>a = 10\nb = 3\n\nprint(a + b)   # 13\nprint(a - b)   # 7\nprint(a * b)   # 30\nprint(a // b)  # 3 (floor division)\nprint(a % b)   # 1 (modulus)\nprint(a ** b)  # 1000 (exponentiation)\n</code></pre>"},{"location":"arithmitic/#2-floating-point-numbers-float","title":"2. Floating Point Numbers (<code>float</code>)","text":"<p>A float represents real numbers with a decimal point.</p> <p>Examples:</p> <pre><code>pi = 3.14159\ntemperature = -7.5\nvalue = 2.0\n\nprint(type(pi))  # &lt;class 'float'&gt;\n</code></pre>"},{"location":"arithmitic/#float-operations","title":"Float Operations","text":"<pre><code>x = 5.5\ny = 2.0\n\nprint(x + y)   # 7.5\nprint(x - y)   # 3.5\nprint(x * y)   # 11.0\nprint(x / y)   # 2.75\n</code></pre> <p>Floats are useful when precision with decimals is required.</p>"},{"location":"arithmitic/#3-complex-numbers-complex","title":"3. Complex Numbers (<code>complex</code>)","text":"<p>A complex number has a real part and an imaginary part, written as <code>a + bj</code>.</p> <p>Examples:</p> <pre><code>c1 = 2 + 3j\nc2 = 4 - 5j\n\nprint(type(c1))  # &lt;class 'complex'&gt;\n</code></pre>"},{"location":"arithmitic/#complex-number-operations","title":"Complex Number Operations","text":"<pre><code>c1 = 2 + 3j\nc2 = 1 - 1j\n\nprint(c1 + c2)  # (3+2j)\nprint(c1 - c2)  # (1+4j)\nprint(c1 * c2)  # (5+1j)\nprint(c1 / c2)  # (-0.5+2.5j)\n</code></pre> <p>Python has built-in support for complex arithmetic.</p>"},{"location":"arithmitic/#4-type-conversion-between-number-types","title":"4. Type Conversion Between Number Types","text":"<p>You can convert between integers, floats, and complex numbers using built-in functions:</p> <pre><code>print(int(3.9))       # 3 (decimal truncated)\nprint(float(7))       # 7.0\nprint(complex(5))     # (5+0j)\nprint(complex(2, 3))  # (2+3j)\n</code></pre>"},{"location":"arithmitic/#summary","title":"Summary","text":"<ul> <li>Integers (<code>int</code>): Whole numbers, positive or negative.</li> <li>Floats (<code>float</code>): Numbers with decimals, for precision.</li> <li>Complex (<code>complex</code>): Numbers with real and imaginary parts.</li> <li>Python allows arithmetic operations across all numeric types and     provides automatic type promotion when needed.</li> </ul> <p>These arithmetic data types form the foundation of numerical programming in Python!</p>"},{"location":"cheat_sheet/","title":"Python Cheat Sheet","text":""},{"location":"cheat_sheet/#who-is-this-for","title":"Who is this for?","text":"<p>This sheet is for budding Python programmers to look up different concepts.</p>"},{"location":"cheat_sheet/#how-to-use-this-sheet","title":"How to use this sheet?","text":"<p>Each concept has a simple-to-understand definition, what they are used for, and links for when you need to know how to use them.</p>"},{"location":"cheat_sheet/#concepts","title":"Concepts","text":""},{"location":"cheat_sheet/#data-types-and-variables","title":"Data Types and Variables","text":"<ul> <li>Data types describe the kind of information a variable/program can use.</li> <li>Depending on the type of data, different operations can be performed on it.</li> <li>Variables point to data. They give names to the data.</li> </ul>"},{"location":"cheat_sheet/#why","title":"Why?","text":"<p>The real world has a lot of different kinds of simple and complex data.  Python programming language tries to provide ways of representing and manipulating that data.</p>"},{"location":"cheat_sheet/#resources","title":"Resources","text":"<ul> <li>Simple Data Types </li> <li>Complex Data Types </li> <li>Official Tutorial </li> <li>Official Documentation</li> </ul>"},{"location":"cheat_sheet/#flow-of-control","title":"Flow of Control","text":"<ul> <li>Flow of control is about the order in which instructions in a program are executed.</li> <li>By default, Python runs code line by line, top to bottom.</li> <li>Following are key elements of Python flow of control:<ul> <li>Conditionals (if) \u2013 run code only if something is true.</li> <li>Loops (for, while) \u2013 repeat code multiple times.  </li> <li>while \u2013 repeating instructions until a condition is true.  </li> <li>for \u2013 going over a list of data repeatedly.</li> <li>Break / Continue \u2013 exit or skip part of a loop.</li> <li>Function Calls \u2013 jump to reusable code blocks. (Covered separately as well)</li> </ul> </li> </ul>"},{"location":"cheat_sheet/#why_1","title":"Why?","text":"<p>Programs have multiple instructions and the sequence they are executed in ensures that the program does its job. The real world is full of situations where decisions and repetition matter. For example:</p> <ul> <li>If it\u2019s raining \u2192 take an umbrella.  </li> <li>Check each student in a class and print their grade.</li> </ul>"},{"location":"cheat_sheet/#resources_1","title":"Resources","text":"<ul> <li>Conditionals </li> <li>Conditionals (Official Tutorial) </li> <li>While loops </li> <li>While loops (Official Tutorial) </li> <li>Break/Continue (Official Tutorial) </li> <li>Functions (Official Tutorial)</li> </ul>"},{"location":"cheat_sheet/#functions","title":"Functions","text":"<ul> <li>A function is a reusable block of code that performs a specific task.</li> <li>Instead of repeating the same code many times, you can define it once and call it whenever needed.</li> </ul>"},{"location":"cheat_sheet/#why_2","title":"Why?","text":"<ul> <li>To have pieces of code that can be used multiple times.  </li> <li>Forms the foundation of open source, where people can write functions for other developers to use.  </li> <li>This allows reusing already written code while hiding the complexity of complicated functionalities like making graphics, analysing data etc.</li> </ul>"},{"location":"cheat_sheet/#resources_2","title":"Resources:","text":"<ul> <li>Functions </li> <li>Functions (Official Tutorial) </li> <li>All Python Built-in Functions</li> </ul>"},{"location":"cheat_sheet/#methods","title":"Methods","text":"<ul> <li>A method is a function that belongs to a data type.</li> <li>It looks like a function call but is always tied to a particular data type.</li> </ul>"},{"location":"cheat_sheet/#why_3","title":"Why?","text":"<p>Data Types in Python often need their own tools.</p> <p>For example:</p> <ul> <li>Strings often need case conversion (<code>.upper()</code>, <code>.lower()</code>)</li> <li>Lists often need adding or removing items (<code>.append()</code>, <code>.remove()</code>)</li> </ul>"},{"location":"cheat_sheet/#resources_3","title":"Resources","text":"<ul> <li>String Methods </li> <li>Numeric Methods </li> <li>List Methods</li> </ul>"},{"location":"cheat_sheet/#modules","title":"Modules","text":"<ul> <li>A module is a file that contains Python code (functions, variables, etc.) that you can use in other programs.</li> <li>Modules help you organize code and reuse functionality without rewriting it.</li> </ul>"},{"location":"cheat_sheet/#why_4","title":"Why?","text":"<p>In the real world, knowledge is grouped into books and tools in a toolbox. Modules are like those toolboxes \u2014 they let you keep related code together and share it across projects. They also help build an open source network of reusable code.</p>"},{"location":"cheat_sheet/#resources_4","title":"Resources","text":"<ul> <li>Modules </li> <li>Modules (Official Documentation)</li> </ul>"},{"location":"cheat_sheet/#packages","title":"Packages","text":"<ul> <li>A package is a collection of modules, organized together in a folder.</li> <li>Packages make it easier to structure and share large amounts of code across many modules.</li> </ul>"},{"location":"cheat_sheet/#why_5","title":"Why?","text":"<p>In the real world, we often group related tools into kits. A module is like a single tool. A package is like a complete toolkit with many related tools inside.</p>"},{"location":"cheat_sheet/#resources_5","title":"Resources","text":"<ul> <li>Packages (Official Documentation) </li> <li>Packages</li> </ul>"},{"location":"cheat_sheet/#is-this-all","title":"Is this all?","text":"<p>No, there are a lot more concepts and tools that you can use. But all of them follow the above basic patterns.</p>"},{"location":"cheat_sheet/#breaking-down-programming-tasks","title":"Breaking Down Programming Tasks","text":"<p>Programming can feel overwhelming at first. Breaking a problem into clear, simple steps makes it much easier to solve.</p>"},{"location":"cheat_sheet/#why_6","title":"Why?","text":"<p>Programming is like solving a puzzle or cooking a recipe.  </p> <ul> <li>Gather the ingredients (inputs).  </li> <li>Know what dish you want (output).  </li> <li>Follow a step-by-step plan (logic).  </li> <li>Taste and adjust (test and improve).</li> </ul>"},{"location":"cheat_sheet/#key-steps","title":"Key Steps","text":"<ol> <li> <p>Understand the Problem </p> <ul> <li>What does the program need to do?  </li> <li>Example: \u201cAsk the user for their age and tell them if they can vote.\u201d</li> </ul> </li> <li> <p>Identify the Inputs </p> <ul> <li>What information will the program need?  </li> <li>Example: user\u2019s age.</li> </ul> </li> <li> <p>Identify the Output </p> <ul> <li>What should the program give back?  </li> <li>Example: message \u201cYou can vote\u201d or \u201cYou cannot vote.\u201d</li> </ul> </li> <li> <p>Plan the Logic </p> <ul> <li>Think about how the input will turn into the output.  </li> <li>Identify packages and modules whose code you can reuse.  </li> <li>This often involves operators, conditionals, or loops.  </li> <li>Example: If age &gt;= 18 \u2192 say yes, otherwise \u2192 say no.</li> </ul> </li> <li> <p>Write the Code (Start Small) </p> <ul> <li>Begin with the simplest version.  </li> <li>Test it. Add features step by step.</li> </ul> </li> <li> <p>Test and Improve </p> <ul> <li>Try different inputs.  </li> <li>Fix mistakes.  </li> <li>Clean up your code so it\u2019s easier to read.</li> </ul> </li> </ol>"},{"location":"common-functions/","title":"Commonly Used Python Functions","text":"<p>Python includes many built-in functions that make coding easier. Here's a list of some of the most useful functions for beginners, with examples of how to use them.</p>"},{"location":"common-functions/#1-print","title":"1. <code>print()</code>","text":"<p>Displays output to the screen.</p> <pre><code>print(\"Hello, world!\")\n</code></pre>"},{"location":"common-functions/#2-len","title":"2. <code>len()</code>","text":"<p>Returns the number of items in a string, list, tuple, or other collection.</p> <pre><code>name = \"Python\"\nprint(len(name))  # Output: 6\n</code></pre>"},{"location":"common-functions/#3-type","title":"3. <code>type()</code>","text":"<p>Returns the type of a variable or value.</p> <pre><code>x = 10\nprint(type(x))  # Output: &lt;class 'int'&gt;\n</code></pre>"},{"location":"common-functions/#4-input","title":"4. <code>input()</code>","text":"<p>Takes input from the user as a string.</p> <pre><code>name = input(\"Enter your name: \")\nprint(\"Hello, \" + name)\n</code></pre>"},{"location":"common-functions/#5-int-float-str","title":"5. <code>int()</code>, <code>float()</code>, <code>str()</code>","text":"<p>Convert values between different types.</p> <pre><code>num_str = \"42\"\nnum = int(num_str)     # Converts to integer\npi = float(\"3.14\")     # Converts to float\nscore = str(99)        # Converts to string\n</code></pre>"},{"location":"common-functions/#6-max-and-min","title":"6. <code>max()</code> and <code>min()</code>","text":"<p>Returns the largest or smallest item from a list or set of values.</p> <pre><code>numbers = [3, 7, 2, 9]\nprint(max(numbers))  # Output: 9\nprint(min(numbers))  # Output: 2\n</code></pre>"},{"location":"common-functions/#7-sum","title":"7. <code>sum()</code>","text":"<p>Returns the total of all values in a list.</p> <pre><code>scores = [10, 20, 30]\nprint(sum(scores))  # Output: 60\n</code></pre>"},{"location":"common-functions/#8-range","title":"8. <code>range()</code>","text":"<p>Generates a sequence of numbers. Commonly used in loops.</p> <pre><code>for i in range(5):\n    print(i)\n# Output: 0 1 2 3 4\n</code></pre>"},{"location":"common-functions/#9-round","title":"9. <code>round()</code>","text":"<p>Rounds a float to the nearest integer or to a given number of decimal places.</p> <pre><code>print(round(3.14159))      # Output: 3\nprint(round(3.14159, 2))   # Output: 3.14\n</code></pre>"},{"location":"common-functions/#10-sorted","title":"10. <code>sorted()</code>","text":"<p>Returns a new sorted list from the items in an iterable.</p> <pre><code>numbers = [5, 3, 8, 1]\nprint(sorted(numbers))  # Output: [1, 3, 5, 8]\n</code></pre>"},{"location":"common-functions/#summary-table","title":"Summary Table","text":"Function Description <code>print()</code> Display output <code>len()</code> Get length of a string or collection <code>type()</code> Check data type <code>input()</code> Take user input <code>int()</code>, <code>float()</code>, <code>str()</code> Convert between types <code>max()</code>, <code>min()</code> Get max/min value <code>sum()</code> Add all items in a list <code>range()</code> Generate a sequence of numbers <code>round()</code> Round numbers <code>sorted()</code> Sort a list or iterable <p>These functions form a solid foundation for writing basic Python programs. Practice using them often!</p>"},{"location":"conditionals/","title":"Python Conditionals","text":"<p>Conditionals in Python allow you to make decisions in your code. They let your program behave differently based on different inputs or states.</p>"},{"location":"conditionals/#the-if-statement","title":"The <code>if</code> Statement","text":"<p>The most basic conditional is the <code>if</code> statement. It runs a block of code only if the condition is <code>True</code>.</p> <pre><code>age = 18\n\nif age &gt;= 18:\n    print(\"You are an adult.\")\n</code></pre>"},{"location":"conditionals/#ifelse-statement","title":"<code>if</code>...<code>else</code> Statement","text":"<p>Use <code>else</code> to provide an alternative block of code when the condition is <code>False</code>.</p> <pre><code>age = 16\n\nif age &gt;= 18:\n    print(\"You are an adult.\")\nelse:\n    print(\"You are a minor.\")\n</code></pre>"},{"location":"conditionals/#comparison-operators","title":"Comparison Operators","text":"<p>These are used to compare values and return a boolean (<code>True</code> or <code>False</code>).</p> Operator Meaning Example Result <code>==</code> Equal to <code>5 == 5</code> <code>True</code> <code>!=</code> Not equal to <code>5 != 3</code> <code>True</code> <code>&gt;</code> Greater than <code>7 &gt; 3</code> <code>True</code> <code>&lt;</code> Less than <code>2 &lt; 1</code> <code>False</code> <code>&gt;=</code> Greater or equal <code>3 &gt;= 3</code> <code>True</code> <code>&lt;=</code> Less or equal <code>2 &lt;= 5</code> <code>True</code>"},{"location":"conditionals/#examples-in-conditionals","title":"Examples in Conditionals:","text":"<pre><code>a = 10\nb = 20\n\n# Check for equality\nif a == b:\n    print(\"a and b are equal\")\nelse:\n    print(\"a and b are not equal\")\n\n# Check for ordering\nif a &lt; b:\n    print(\"a is less than b\")\n\n# Combine comparison and action\nif b &gt;= 20:\n    print(\"b is at least 20\")\n</code></pre>"},{"location":"conditionals/#logical-operators","title":"Logical Operators","text":"<p>Logical operators combine multiple conditions into a single boolean result.</p> Operator Description Example Result <code>and</code> Both must be true <code>(5 &gt; 2 and 3 &lt; 4)</code> <code>True</code> <code>or</code> At least one true <code>(5 &lt; 2 or 3 &lt; 4)</code> <code>True</code> <code>not</code> Reverses boolean <code>not (5 == 5)</code> <code>False</code>"},{"location":"conditionals/#examples-in-conditionals_1","title":"Examples in Conditionals:","text":"<pre><code>x = 7\n\n# Using 'and'\nif x &gt; 5 and x &lt; 10:\n    print(\"x is between 5 and 10\")\n\nis_weekend = True\nis_holiday = False\n\n# Using 'or'\nif is_weekend or is_holiday:\n    print(\"You can relax today\")\n\nlogged_in = False\n\n# Using 'not'\nif not logged_in:\n    print(\"Please log in\")\n</code></pre>"},{"location":"conditionals/#nested-conditionals","title":"Nested Conditionals","text":"<p>You can put <code>if</code> statements inside other <code>if</code> statements.</p> <pre><code>x = 15\n\nif x &gt; 10:\n    if x &lt; 20:\n        print(\"x is between 10 and 20\")\n</code></pre>"},{"location":"conditionals/#ifelifelse-statement","title":"<code>if</code>...<code>elif</code>...<code>else</code> Statement","text":"<p>Use <code>elif</code> (short for \"else if\") to check multiple conditions in order.</p> <pre><code>score = 75\n\nif score &gt;= 90:\n    print(\"Grade: A\")\nelif score &gt;= 80:\n    print(\"Grade: B\")\nelif score &gt;= 70:\n    print(\"Grade: C\")\nelse:\n    print(\"Grade: D or F\")\n</code></pre>"},{"location":"conditionals/#summary","title":"Summary","text":"<ul> <li>Use <code>if</code>, <code>elif</code>, and <code>else</code> to control the flow of your program.</li> <li>Use comparison operators to evaluate values inside conditionals.</li> <li>Use logical operators to combine multiple conditions inside <code>if</code> statements.</li> <li>Nest conditionals for more complex decision trees.</li> </ul> <p>Conditionals make Python programs flexible and interactive.</p>"},{"location":"dictionary/","title":"Python Dictionary Data Type","text":""},{"location":"dictionary/#what-is-a-dictionary","title":"What is a Dictionary?","text":"<p>A dictionary in Python is a collection of key-value pairs. Each key must be unique, and it maps to a value.</p> <p>Dictionaries are useful for storing data that is best represented as a mapping (like a real dictionary with words and definitions).</p> <p>Examples:</p> <pre><code>student = {\n    \"name\": \"Alice\",\n    \"age\": 20,\n    \"grade\": \"A\"\n}\n</code></pre>"},{"location":"dictionary/#creating-dictionaries","title":"Creating Dictionaries","text":"<pre><code>empty_dict = {}\nperson = {\"name\": \"Bob\", \"age\": 25}\n</code></pre> <p>You can also use the <code>dict()</code> function:</p> <pre><code>person = dict(name=\"Charlie\", age=30)\n</code></pre>"},{"location":"dictionary/#accessing-values","title":"Accessing Values","text":"<p>You can access values by their keys:</p> <pre><code>student = {\"name\": \"Alice\", \"age\": 20}\nprint(student[\"name\"])  # \"Alice\"\nprint(student.get(\"age\"))  # 20\n</code></pre> <p>If a key is missing, <code>get()</code> returns <code>None</code> (or a default value you specify):</p> <pre><code>print(student.get(\"grade\", \"Not Assigned\"))  # \"Not Assigned\"\n</code></pre>"},{"location":"dictionary/#modifying-dictionaries","title":"Modifying Dictionaries","text":"<pre><code>student = {\"name\": \"Alice\", \"age\": 20}\n\n# Add new key-value pair\nstudent[\"grade\"] = \"A\"\n\n# Update value\nstudent[\"age\"] = 21\n\nprint(student)  # {'name': 'Alice', 'age': 21, 'grade': 'A'}\n</code></pre>"},{"location":"dictionary/#removing-items","title":"Removing Items","text":"<pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\n\nstudent.pop(\"grade\")     # Removes 'grade'\ndel student[\"age\"]       # Removes 'age'\nstudent.clear()          # Removes everything\n\nprint(student)  # {}\n</code></pre>"},{"location":"dictionary/#looping-through-dictionaries","title":"Looping Through Dictionaries","text":"<pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\n\n# Loop over keys\nfor key in student:\n    print(key)\n\n# Loop over values\nfor value in student.values():\n    print(value)\n\n# Loop over key-value pairs\nfor key, value in student.items():\n    print(key, \"\u2192\", value)\n</code></pre> <p>Output:</p> <pre><code>name \u2192 Alice\nage \u2192 20\ngrade \u2192 A\n</code></pre>"},{"location":"dictionary/#useful-dictionary-methods","title":"Useful Dictionary Methods","text":"<pre><code>student = {\"name\": \"Alice\", \"age\": 20}\n\nprint(student.keys())    # dict_keys(['name', 'age'])\nprint(student.values())  # dict_values(['Alice', 20])\nprint(student.items())   # dict_items([('name', 'Alice'), ('age', 20)])\n\n# Update dictionary\nstudent.update({\"grade\": \"A\", \"age\": 21})\nprint(student)  # {'name': 'Alice', 'age': 21, 'grade': 'A'}\n</code></pre>"},{"location":"dictionary/#nested-dictionaries","title":"Nested Dictionaries","text":"<p>Dictionaries can hold other dictionaries:</p> <pre><code>school = {\n    \"student1\": {\"name\": \"Alice\", \"age\": 20},\n    \"student2\": {\"name\": \"Bob\", \"age\": 22}\n}\n\nprint(school[\"student1\"][\"name\"])  # \"Alice\"\n</code></pre>"},{"location":"dictionary/#summary","title":"Summary","text":"<ul> <li>Dictionaries store key-value pairs.</li> <li>Keys must be unique and immutable (strings, numbers, tuples).</li> <li>Values can be any data type.</li> <li>Support operations like adding, updating, removing, and looping.</li> <li>Great for structured data like records or JSON.</li> </ul> <p>Dictionaries are one of the most powerful and flexible data types in Python!</p>"},{"location":"flow-of-control/","title":"Python Flow of Control","text":"<p>When you run a Python script, the interpreter follows a predictable flow to execute the code. This document explains how Python reads a <code>.py</code> file, what happens with variable assignments, function definitions and calls, and other control structures\u2014all in a beginner\u2011friendly way.</p>"},{"location":"flow-of-control/#1-starting-the-interpreter","title":"1. Starting the Interpreter","text":"<ol> <li>Read the file: Python reads your script from top to bottom.</li> <li>Compile to bytecode: Behind the scenes, each line is translated into an intermediate form called bytecode.</li> <li>Execute: A component called the Python Virtual Machine (PVM) runs the bytecode line by line.</li> </ol> <p>You don\u2019t need to worry about bytecode in day\u2011to\u2011day coding\u2014just know it\u2019s the bridge between your source code and the machine doing the work.</p>"},{"location":"flow-of-control/#2-sequential-execution","title":"2. Sequential Execution","text":"<p>By default, Python executes statements one after another:</p> <pre><code>print(\"Step 1\")\nprint(\"Step 2\")\n</code></pre> <p>Output:</p> <pre><code>Step 1\nStep 2\n</code></pre> <p>Unless a control structure (like a <code>function</code>, <code>if</code>, or <code>loop</code>) changes the path, Python keeps moving downward.</p>"},{"location":"flow-of-control/#3-variable-assignments","title":"3. Variable Assignments","text":"<p>When Python encounters an assignment:</p> <pre><code>x = 5\ny = x + 3\n</code></pre> <ol> <li>Evaluate the right side (<code>x + 3</code> \u2192 <code>8</code>).</li> <li>Bind the name on the left (<code>y</code>) to that result (<code>8</code>) in the current namespace (a table that maps names to objects).</li> </ol> <p>Key points:</p> <ul> <li>No need to declare types\u2014Python figures it out at runtime.</li> <li>Reassigning a variable simply points the name to a new object.</li> </ul>"},{"location":"flow-of-control/#4-function-definitions-def","title":"4. Function Definitions (<code>def</code>)","text":"<p>Meeting a <code>def</code> statement is not a function call. Instead, Python:</p> <ol> <li>Creates a function object containing the code block.</li> <li>Binds the function\u2019s name to that object.</li> </ol> <pre><code>def greet(name):\n    print(\"Hello,\", name)\n\n# No output yet; only definition happened\n</code></pre>"},{"location":"flow-of-control/#5-function-calls","title":"5. Function Calls","text":"<p>Calling a function triggers a new stack frame (a workspace for that call):</p> <pre><code>greet(\"Ada\")\n</code></pre> <p>Steps:</p> <ol> <li>Evaluate arguments (<code>\"Ada\"</code>).</li> <li>Push a new frame with its own local variables.</li> <li>Execute the function body line by line.</li> <li>Return control (and any value) back to the caller.</li> <li>Pop the frame\u2014locals disappear, but any returned value persists.</li> </ol>"},{"location":"flow-of-control/#6-control-structures","title":"6. Control Structures","text":""},{"location":"flow-of-control/#conditionals","title":"Conditionals","text":"<pre><code>if temperature &gt; 30:\n    print(\"Hot!\")\nelse:\n    print(\"Comfortable.\")\n</code></pre> <ul> <li>Python checks the condition top to bottom.</li> <li>Executes the first branch that is <code>True</code>.</li> </ul>"},{"location":"flow-of-control/#loops","title":"Loops","text":"<pre><code>for i in range(3):\n    print(i)\n</code></pre> <ul> <li><code>for</code> and <code>while</code> repeat a block.</li> <li>Control returns to the loop header after each iteration until the condition ends.</li> </ul>"},{"location":"flow-of-control/#break-and-continue","title":"<code>break</code> and <code>continue</code>","text":"<ul> <li><code>break</code> exits a loop early.</li> <li><code>continue</code> skips to the next iteration.</li> </ul>"},{"location":"flow-of-control/#7-imports","title":"7. Imports","text":"<p>At an <code>import</code> statement, Python:</p> <ol> <li>Searches for the module.</li> <li>Executes it once (running any top\u2011level code inside).</li> <li>Adds the module to <code>sys.modules</code> cache.</li> <li>Binds the module name (or selected members) in your script.</li> </ol>"},{"location":"flow-of-control/#8-putting-it-all-together-walkthrough-example","title":"8. Putting It All Together \u2014 Walk\u2011Through Example","text":"<pre><code># flow_example.py\nimport math          # Step A\n\nradius = 2           # Step B\n\ndef area(r):         # Step C\n    return math.pi * r ** 2\n\nprint(area(radius))  # Step D\n</code></pre> Step What Happens A The <code>math</code> module is loaded and cached. B <code>radius</code> is bound to <code>2</code>. C Function <code>area</code> is created (no calculation yet). D <code>area</code> is called \u2192 new frame \u2192 calculation \u2192 control returns with result"},{"location":"flow-of-control/#9-key-takeaways","title":"9. Key Takeaways","text":"<ul> <li>Python reads your file from top to bottom, executing as it goes.</li> <li>Assignments bind names to objects after evaluating the right side.</li> <li>Function definitions create objects; function calls run them in new frames.</li> <li>Control structures (<code>if</code>, loops) alter the straight\u2011line flow.</li> <li>Imports run a module\u2019s top\u2011level code only once, then hand you the module object.</li> </ul> <p>Understanding this flow helps you predict how Python will behave and debug your programs with confidence.</p>"},{"location":"functions/","title":"Python Functions","text":"<p>Functions are reusable blocks of code that perform a specific task. They help organize code, reduce repetition, and improve readability.</p>"},{"location":"functions/#what-is-a-function","title":"What is a Function?","text":"<p>A function is a named sequence of statements that performs a computation. You define a function once and can use it as many times as needed.</p>"},{"location":"functions/#defining-a-function","title":"Defining a Function","text":"<pre><code>def greet():\n    print(\"Hello, world!\")\n</code></pre>"},{"location":"functions/#calling-a-function","title":"Calling a Function","text":"<pre><code>greet()  # Output: Hello, world!\n</code></pre>"},{"location":"functions/#why-use-functions","title":"Why Use Functions?","text":"<ul> <li>Reusability: Write code once and use it multiple times.</li> <li>Organization: Break programs into smaller, manageable parts.</li> <li>Maintainability: Easier to debug and update code.</li> <li>Avoid Repetition: Reduces duplicate code.</li> </ul>"},{"location":"functions/#function-with-parameters","title":"Function with Parameters","text":"<p>Functions can accept inputs, known as parameters.</p> <pre><code>def greet(name):\n    print(f\"Hello, {name}!\")\n</code></pre>"},{"location":"functions/#example","title":"Example:","text":"<pre><code>greet(\"Alice\")   # Output: Hello, Alice!\ngreet(\"Bob\")     # Output: Hello, Bob!\n</code></pre>"},{"location":"functions/#function-with-return-value","title":"Function with Return Value","text":"<p>Functions can return values using the <code>return</code> statement.</p> <pre><code>def add(a, b):\n    return a + b\n</code></pre>"},{"location":"functions/#example_1","title":"Example:","text":"<pre><code>result = add(3, 4)\nprint(result)    # Output: 7\n</code></pre>"},{"location":"functions/#default-parameters","title":"Default Parameters","text":"<p>You can provide default values for parameters.</p> <pre><code>def greet(name=\"Guest\"):\n    print(f\"Hello, {name}!\")\n</code></pre>"},{"location":"functions/#example_2","title":"Example:","text":"<pre><code>greet()           # Output: Hello, Guest!\ngreet(\"Diana\")    # Output: Hello, Diana!\n</code></pre>"},{"location":"functions/#keyword-and-positional-arguments","title":"Keyword and Positional Arguments","text":"<p>Python supports both positional and keyword arguments.</p> <pre><code>def describe_pet(animal, name):\n    print(f\"I have a {animal} named {name}.\")\n</code></pre>"},{"location":"functions/#example_3","title":"Example:","text":"<pre><code>describe_pet(\"dog\", \"Buddy\")                   # Positional\ndescribe_pet(name=\"Whiskers\", animal=\"cat\")    # Keyword\n</code></pre>"},{"location":"functions/#returning-multiple-values","title":"Returning Multiple Values","text":"<p>Functions can return multiple values as a tuple.</p> <pre><code>def get_coordinates():\n    x = 5\n    y = 10\n    return x, y\n\na, b = get_coordinates()\nprint(a, b)  # Output: 5 10\n</code></pre>"},{"location":"functions/#scope-of-variables","title":"Scope of Variables","text":"<p>Variables defined inside a function are local to that function.</p> <pre><code>def example():\n    local_var = \"I am local\"\n    print(local_var)\n\nexample()\n# print(local_var)  # This would raise an error\n</code></pre>"},{"location":"functions/#summary","title":"Summary","text":"Feature Description <code>def</code> keyword Used to define a function <code>return</code> statement Sends a result back to the caller Parameters Input values passed to a function Default values Optional values for parameters Reusability Functions reduce code duplication Scope Local vs Global variable access <p>Understanding how to write and use functions is crucial for building efficient and modular Python programs.</p>"},{"location":"how-to-tackle-coding-tasks/","title":"A Simple Four\u2011Step Approach to Solving Programming Tasks","text":"<p>When you face a new coding challenge, use these four practical steps to stay organized and make steady progress.</p>"},{"location":"how-to-tackle-coding-tasks/#1-map-your-inputs","title":"1. Map Your Inputs","text":"<ul> <li>What will the program receive? Examples: a list of numbers, a user\u2011typed string, a CSV file, API JSON.</li> <li>What edge cases exist? Empty list vs. long list, invalid text, missing fields.</li> </ul> <p>Write down each input type and edge case so nothing surprises you later.</p>"},{"location":"how-to-tackle-coding-tasks/#2-define-the-desired-output","title":"2. Define the Desired Output","text":"<ul> <li>What should the program produce? A single number? A formatted report? A modified file?</li> <li>In what format? Plain text, JSON, CSV, printed lines, a return value?</li> </ul> <p>Clarity here makes planning the middle steps much easier.</p>"},{"location":"how-to-tackle-coding-tasks/#3-sketch-the-data-transformations","title":"3. Sketch the Data Transformations","text":"<p>Plan the route from input to output:</p> <ul> <li>Operations \u2013 addition, string slicing, sorting, etc.  </li> <li>Control flow \u2013 <code>if</code> checks, loops, list comprehensions.  </li> <li>Helper functions \u2013 small reusable chunks to keep code tidy.</li> <li>Modules and Packages needed - What modules and packages will be useful and have functions that can be reused.</li> </ul> <p>A quick bullet list or flowchart is usually enough. You just need direction, not perfection.</p>"},{"location":"how-to-tackle-coding-tasks/#4-build-iteratively","title":"4. Build Iteratively","text":"<ol> <li>Start small \u2013 implement the simplest path from input to correct output.  </li> <li>Run and test \u2013 confirm that basic case works.  </li> <li>Add features or edge cases one at a time \u2013 test after each change.  </li> <li>Refactor as you go \u2013 keep the code readable.</li> </ol> <p>Small steps keep bugs local and progress visible.</p>"},{"location":"how-to-tackle-coding-tasks/#quick-reference","title":"Quick Reference","text":"Step Question to Ask What to Produce 1 \u201cWhat comes in?\u201d List inputs &amp; edge cases 2 \u201cWhat should come out?\u201d Clear output example/format 3 \u201cHow does data change?\u201d Bullet\u2011point plan of operations 4 \u201cHow do we get there?\u201d Working code, refined iteratively <p>Stick to these four steps and you\u2019ll turn vague tasks into reliable, maintainable programs\u2014without the overwhelm.</p>"},{"location":"list/","title":"Python List Data Type","text":""},{"location":"list/#what-is-a-list","title":"What is a List?","text":"<p>A list in Python is an ordered, mutable collection of items. Lists can store different types of data such as numbers, strings, or even other lists.</p> <p>Examples:</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = [1, \"hello\", 3.14, True]\n</code></pre>"},{"location":"list/#creating-a-list","title":"Creating a List","text":"<p>You can create a list using square brackets <code>[]</code>:</p> <pre><code>my_list = [10, 20, 30]\nempty_list = []\n</code></pre>"},{"location":"list/#accessing-elements","title":"Accessing Elements","text":"<p>Lists are indexed, starting at <code>0</code>. You can access elements using their index:</p> <pre><code>animals = [\"cat\", \"dog\", \"elephant\"]\n\nprint(animals[0])   # \"cat\"\nprint(animals[1])   # \"dog\"\nprint(animals[-1])  # \"elephant\" (last item)\n</code></pre>"},{"location":"list/#modifying-a-list","title":"Modifying a List","text":"<p>Lists are mutable, meaning you can change their contents:</p> <pre><code>colors = [\"red\", \"blue\", \"green\"]\ncolors[1] = \"yellow\"\nprint(colors)  # [\"red\", \"yellow\", \"green\"]\n</code></pre>"},{"location":"list/#common-list-operations","title":"Common List Operations","text":"<pre><code>nums = [1, 2, 3]\n\n# Add items\nnums.append(4)        # [1, 2, 3, 4]\nnums.insert(1, 10)    # [1, 10, 2, 3, 4]\n\n# Remove items\nnums.remove(10)       # [1, 2, 3, 4]\nnums.pop()            # Removes last \u2192 [1, 2, 3]\n\n# Length\nprint(len(nums))      # 3\n\n# Concatenation\nprint(nums + [4, 5])  # [1, 2, 3, 4, 5]\n\n# Repetition\nprint(nums * 2)       # [1, 2, 3, 1, 2, 3]\n</code></pre>"},{"location":"list/#looping-through-a-list","title":"Looping Through a List","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n</code></pre> <p>Output:</p> <pre><code>apple\nbanana\ncherry\n</code></pre>"},{"location":"list/#list-slicing","title":"List Slicing","text":"<p>Lists support slicing just like strings:</p> <pre><code>letters = [\"a\", \"b\", \"c\", \"d\", \"e\"]\nprint(letters[1:4])   # ['b', 'c', 'd']\nprint(letters[:3])    # ['a', 'b', 'c']\nprint(letters[::2])   # ['a', 'c', 'e']\n</code></pre>"},{"location":"list/#nested-lists","title":"Nested Lists","text":"<p>Lists can contain other lists:</p> <pre><code>matrix = [[1, 2], [3, 4], [5, 6]]\nprint(matrix[0])     # [1, 2]\nprint(matrix[1][1])  # 4\n</code></pre>"},{"location":"list/#useful-list-methods","title":"Useful List Methods","text":"<pre><code>numbers = [3, 1, 4, 1, 5]\n\nprint(min(numbers))   # 1\nprint(max(numbers))   # 5\nprint(sum(numbers))   # 14\n\nnumbers.sort()\nprint(numbers)        # [1, 1, 3, 4, 5]\n\nnumbers.reverse()\nprint(numbers)        # [5, 4, 3, 1, 1]\n</code></pre>"},{"location":"list/#summary","title":"Summary","text":"<ul> <li>Lists are ordered, mutable collections of items.</li> <li>Support indexing, slicing, and iteration.</li> <li>Can hold different types of data.</li> <li>Provide many built-in methods (<code>append</code>, <code>remove</code>, <code>sort</code>, etc.).</li> </ul> <p>Lists are one of the most versatile and commonly used data types in Python!</p>"},{"location":"modules/","title":"Python Modules","text":""},{"location":"modules/#what-is-a-module","title":"What is a Module?","text":"<p>A module in Python is a file that contains Python code (functions, classes, and variables) that you can reuse in other programs. Modules help you organize your code into logical sections and avoid repeating yourself.</p> <p>There are two types of modules: 1. Built-in modules -- come with Python (e.g., <code>os</code>, <code>io</code>, <code>math</code>). 2. User-defined modules -- created by you in separate <code>.py</code> files.</p> <p>You use the <code>import</code> statement to load a module into your program.</p>"},{"location":"modules/#importing-a-module","title":"Importing a Module","text":"<pre><code>import math\n\nprint(math.sqrt(16))  # 4.0\nprint(math.pi)        # 3.141592653589793\n</code></pre> <p>You can also import specific functions:</p> <pre><code>from math import sqrt, pi\n\nprint(sqrt(25))  # 5.0\nprint(pi)        # 3.141592653589793\n</code></pre>"},{"location":"modules/#example-1-the-os-module","title":"Example 1: The <code>os</code> Module","text":"<p>The <code>os</code> module provides functions to interact with the operating system (files, directories, environment variables).</p> <pre><code>import os\n\n# Check if a file exists\nif os.path.exists(\"example.txt\"):\n    print(\"File already exists!\")\nelse:\n    print(\"File does not exist yet.\")\n</code></pre> <p>This helps you safely check before creating, reading, or writing files.</p>"},{"location":"modules/#example-2-the-io-module","title":"Example 2: The <code>io</code> Module","text":"<p>The <code>io</code> module provides tools for handling input and output (working with files in text and binary modes).</p> <pre><code>import io\n\n# Write text to a file\nf = io.open(\"example_io.txt\", \"w\", encoding=\"utf-8\")\nf.write(\"Hello, this is written using the io module.\")\nf.close()\n\n# Read the text back\nf = io.open(\"example_io.txt\", \"r\", encoding=\"utf-8\")\ncontent = f.read()\nprint(content)  # \"Hello, this is written using the io module.\"\nf.close()\n</code></pre>"},{"location":"modules/#why-use-modules","title":"Why Use Modules?","text":"<ul> <li>Organization \u2192 Keeps code clean and modular.  </li> <li>Reusability \u2192 Functions can be used in multiple programs.  </li> <li>Built-in Power \u2192 Python modules provide ready-to-use functionality.  </li> </ul>"},{"location":"modules/#more-resources","title":"More Resources","text":"<ul> <li>Python Modules Documentation </li> <li>Python OS Module </li> <li>Python IO Module </li> </ul>"},{"location":"modules/#summary","title":"Summary","text":"<ul> <li>Modules are reusable pieces of Python code.  </li> <li>Use <code>import</code> to load built-in or custom modules.  </li> <li><code>os</code> is used for file and system operations (like checking if a file exists).  </li> <li><code>io</code> is used for reading and writing to files.  </li> </ul> <p>Modules not only help with organization but also enable reusability\u2014you can write code once and use it across many projects.</p>"},{"location":"more_datatypes/","title":"More Python Data Types","text":"<p>So far, we've looked at some of the core built-in data types in Python: </p> <ul> <li>Numbers (<code>int</code>, <code>float</code>, <code>complex</code>) </li> <li>Strings (<code>str</code>) </li> <li>Lists (<code>list</code>) </li> <li>Tuples (<code>tuple</code>) </li> <li>Sets (<code>set</code>)</li> <li>Dictionaries (<code>dict</code>)</li> <li>Booleans (<code>bool</code>)</li> </ul> <p>But Python has many more data types and data structures that you can use depending on your needs.</p>"},{"location":"more_datatypes/#other-built-in-data-types","title":"Other Built-in Data Types","text":"<p>Here are some additional built-in data types you may encounter:</p> <ul> <li>Bytes &amp; Bytearray \u2192 Used for handling binary data.</li> <li>Range \u2192 Represents a sequence of numbers, often used in loops.</li> <li>NoneType \u2192 Special type with only one value: <code>None</code>.</li> <li>Frozen Set \u2192 An immutable version of a set.</li> </ul>"},{"location":"more_datatypes/#beyond-built-ins","title":"Beyond Built-ins","text":"<p>Python also has powerful modules that provide advanced data structures: - <code>collections</code> module \u2192 <code>Counter</code>, <code>defaultdict</code>, <code>OrderedDict</code>, <code>deque</code>, <code>namedtuple</code>. - <code>array</code> module \u2192 Efficient storage of basic numeric types. - <code>decimal</code> and <code>fractions</code> modules \u2192 For precise decimal arithmetic and rational numbers.</p>"},{"location":"more_datatypes/#exploring-more","title":"Exploring More","text":"<p>If you'd like to explore all the data types Python provides, here are some excellent resources:</p> <ul> <li>Official Python     Documentation</li> <li>Real Python Guide to Data     Types</li> <li>Programiz Python Data Types     Tutorial</li> </ul>"},{"location":"more_datatypes/#summary","title":"Summary","text":"<ul> <li>Python has many built-in data types, but also specialized types for     advanced use cases.</li> <li>You don't need to memorize all of them right away. Focus first on     the common ones: numbers, strings, lists, sets, tuples, and     dictionaries.</li> <li>Explore official docs and tutorials as you grow more comfortable     with Python.</li> </ul> <p>Understanding Python's data types is the first step toward mastering the language!</p>"},{"location":"resources/","title":"Python Learning Resources","text":"<p>Learning Python is a journey, and there are many excellent resources available online to help you. Here's a curated list of beginner-friendly and advanced resources.</p>"},{"location":"resources/#official-documentation","title":"Official Documentation","text":"<ul> <li> <p>Python Official Documentation     The primary source for everything about Python. Includes tutorials,     library references, and advanced guides.</p> </li> <li> <p>Python Tutorial     (Docs)     The official Python tutorial for beginners.</p> </li> </ul>"},{"location":"resources/#interactive-learning-platforms","title":"Interactive Learning Platforms","text":"<ul> <li>W3Schools Python Tutorial --     Beginner-friendly interactive lessons.\\</li> <li>Programiz Python     Tutorial --     Step-by-step explanations with examples.\\</li> <li>Real Python -- In-depth tutorials,     articles, and practice projects.\\</li> <li>Codecademy Python     -- Interactive coding lessons for beginners.\\</li> <li>Kaggle Learn Python --     Hands-on coding exercises with datasets.</li> </ul>"},{"location":"resources/#video-tutorials","title":"Video Tutorials","text":"<ul> <li>Python Programming on FreeCodeCamp     (YouTube) -- A 4-hour     comprehensive beginner's course.</li> <li>Corey Schafer's Python     Playlist     -- Covers Python basics and advanced topics.</li> </ul>"},{"location":"resources/#practice-platforms","title":"Practice Platforms","text":"<ul> <li>HackerRank Python --     Coding challenges for practice.</li> <li>LeetCode -- Algorithm and problem-solving     with Python.</li> <li>Exercism Python -- Mentored     exercises to improve coding skills.</li> <li>Project Euler -- Math and logic     challenges in Python.</li> </ul>"},{"location":"resources/#books-free-paid","title":"Books (Free &amp; Paid)","text":"<ul> <li>Automate the Boring Stuff with Python by Al Sweigart -- Free to     read online.\\</li> <li>Python Crash Course by Eric Matthes -- Great beginner-friendly     book.\\</li> <li>Fluent Python by Luciano Ramalho -- For advanced learners.</li> </ul>"},{"location":"resources/#communities-forums","title":"Communities &amp; Forums","text":"<ul> <li>Python Reddit Community --     Ask questions and share resources.</li> <li>Stack Overflow Python     Questions --     Search and ask coding questions.</li> <li>Real Python Slack     Community -- Join Python     discussions.</li> </ul>"},{"location":"resources/#summary","title":"Summary","text":"<ul> <li>Start with official documentation and beginner tutorials.</li> <li>Use interactive platforms for practice.</li> <li>Watch YouTube tutorials for visual learning.</li> <li>Join communities to get help and stay motivated.</li> </ul> <p>With consistent practice, you'll steadily improve your Python skills!</p>"},{"location":"strings/","title":"Python String Data Type","text":""},{"location":"strings/#what-is-a-string","title":"What is a String?","text":"<p>In Python, a string is a sequence of characters enclosed in single quotes (<code>'</code>), double quotes (<code>\"</code>), or triple quotes (<code>'''</code> or <code>\"\"\"</code>). Strings are used to represent text.</p> <p>Examples:</p> <pre><code>name = \"Alice\"\ngreeting = 'Hello'\nparagraph = '''This is\na multi-line\nstring.'''\n</code></pre>"},{"location":"strings/#creating-strings","title":"Creating Strings","text":"<p>You can create strings using quotes:</p> <pre><code>str1 = \"Python\"\nstr2 = 'Programming'\nstr3 = \"\"\"Multi-line\nstring example.\"\"\"\n</code></pre>"},{"location":"strings/#string-operations","title":"String Operations","text":"<p>Python provides many operations with strings:</p> <pre><code>a = \"Hello\"\nb = \"World\"\n\nprint(a + \" \" + b)  # Concatenation \u2192 \"Hello World\"\nprint(a * 3)        # Repetition \u2192 \"HelloHelloHello\"\nprint(len(a))       # Length \u2192 5\n</code></pre>"},{"location":"strings/#indexing-and-slicing","title":"Indexing and Slicing","text":"<p>Strings are sequences, so you can access parts of them:</p> <pre><code>text = \"Python\"\n\nprint(text[0])   # First character \u2192 \"P\"\nprint(text[-1])  # Last character \u2192 \"n\"\nprint(text[0:4]) # Slice \u2192 \"Pyth\"\n</code></pre>"},{"location":"strings/#common-string-methods","title":"Common String Methods","text":"<p>Python strings have built-in methods:</p> <pre><code>msg = \"hello world\"\n\nprint(msg.upper())    # \"HELLO WORLD\"\nprint(msg.lower())    # \"hello world\"\nprint(msg.title())    # \"Hello World\"\nprint(msg.replace(\"world\", \"Python\"))  # \"hello Python\"\nprint(msg.strip())    # Removes whitespace from start and end\n</code></pre>"},{"location":"strings/#type-conversion","title":"Type Conversion","text":"<p>Convert other data types to strings with <code>str()</code>:</p> <pre><code>num = 42\nprint(str(num))  # \"42\"\n</code></pre>"},{"location":"strings/#summary","title":"Summary","text":"<ul> <li>Strings represent text in Python.</li> <li>Defined using quotes: <code>' '</code>, <code>\" \"</code>, <code>''' '''</code>, or <code>\"\"\" \"\"\"</code>.</li> <li>Support operations like concatenation, repetition, slicing, and many     methods.</li> <li>Use <code>str()</code> to convert other data types to strings.</li> </ul> <p>Strings are extremely powerful for working with text in Python!</p>"},{"location":"variables/","title":"Python Variables","text":"<p>Variables are one of the most fundamental concepts in Python programming. They are used to store data that can be used and changed throughout your program.</p>"},{"location":"variables/#what-is-a-variable","title":"What is a Variable?","text":"<p>A variable is a name that refers to a value. Think of it as a labeled box where you can store information to use later.</p> <pre><code>age = 25\nname = \"Alice\"\ntemperature = 36.6\n</code></pre> <p>In the examples above: - <code>age</code> is storing an integer. - <code>name</code> is storing a string. - <code>temperature</code> is storing a float (decimal number).</p>"},{"location":"variables/#rules-for-naming-variables","title":"Rules for Naming Variables","text":"<p>Python has a few rules and guidelines for naming variables:</p> <ul> <li>Must start with a letter (a\u2013z, A\u2013Z) or an underscore <code>_</code>.</li> <li>Can only contain letters, numbers, and underscores.</li> <li>Cannot use Python keywords like <code>if</code>, <code>class</code>, or <code>while</code>.</li> <li>Variable names are case-sensitive (<code>Name</code> and <code>name</code> are different).</li> </ul> <p>Valid examples:</p> <pre><code>student_name = \"Bob\"\n_age = 30\ntotal3 = 45\n</code></pre> <p>Invalid examples:</p> <pre><code>3total = 100       # Starts with a number\nclass = \"Math\"     # 'class' is a reserved keyword\nstudent-name = \"Sam\"  # Contains a hyphen\n</code></pre>"},{"location":"variables/#data-types","title":"Data Types","text":"<p>Variables can hold different types of data. Some common ones are:</p> Type Example Integer <code>x = 10</code> Float <code>pi = 3.14</code> String <code>name = \"Charlie\"</code> Boolean <code>is_sunny = True</code> List <code>fruits = [\"apple\", \"banana\"]</code> Dictionary <code>student = {\"name\": \"Anna\", \"age\": 21}</code> <p>Python automatically detects the type of data you assign to a variable.</p>"},{"location":"variables/#changing-values","title":"Changing Values","text":"<p>You can reassign a new value to a variable at any time.</p> <pre><code>score = 90\nscore = 95  # score now holds 95\n</code></pre>"},{"location":"variables/#multiple-assignments","title":"Multiple Assignments","text":"<p>Python allows you to assign values to multiple variables in one line.</p> <pre><code>x, y, z = 1, 2, 3\n</code></pre> <p>You can also assign the same value to multiple variables:</p> <pre><code>a = b = c = 0\n</code></pre>"},{"location":"variables/#using-variables-in-expressions","title":"Using Variables in Expressions","text":"<p>Variables can be used in calculations and expressions.</p> <pre><code>a = 10\nb = 5\nresult = a + b  # result is 15\n</code></pre>"},{"location":"variables/#the-type-function","title":"The <code>type()</code> Function","text":"<p>Use <code>type()</code> to find out the type of value a variable holds:</p> <pre><code>x = 5\nprint(type(x))  # Output: &lt;class 'int'&gt;\n</code></pre>"},{"location":"variables/#summary","title":"Summary","text":"<ul> <li>Variables store data values.</li> <li>Python automatically infers the type of the variable.</li> <li>Follow naming rules for clean, readable code.</li> <li>Use variables to hold, update, and manipulate data.</li> </ul>"},{"location":"while-loops/","title":"Python <code>while</code> Loops","text":"<p><code>while</code> loops let you repeat a block of code as long as a condition remains <code>True</code>. They\u2019re handy when you don\u2019t know ahead of time how many repetitions you\u2019ll need.</p>"},{"location":"while-loops/#1-basic-while-loop","title":"1. Basic <code>while</code> Loop","text":"<pre><code>counter = 1\n\nwhile counter &lt;= 5:\n    print(\"Count:\", counter)\n    counter += 1\n</code></pre> <p>Flow 1. Check <code>counter &lt;= 5</code>. 2. If <code>True</code>, run the body. 3. Increment <code>counter</code>. 4. Repeat until the condition becomes <code>False</code>.</p>"},{"location":"while-loops/#2-while-with-nested-conditionals","title":"2. <code>while</code> with Nested Conditionals","text":"<p>Add <code>if</code> statements inside the loop for more control.</p> <pre><code>number = 6\n\nwhile number &gt; 0:\n    if number % 2 == 0:\n        print(number, \"is even\")\n    else:\n        print(number, \"is odd\")\n    number -= 1\n</code></pre>"},{"location":"while-loops/#3-breaking-out-early-with-break","title":"3. Breaking Out Early with <code>break</code>","text":"<pre><code>secret = \"xyz\"\nattempts = 0\n\nwhile attempts &lt; 3:\n    guess = input(\"Guess: \")\n    if guess == secret:\n        print(\"Correct!\")\n        break        # Exit loop immediately\n    attempts += 1\n\nif attempts == 3 and guess != secret:\n    print(\"Out of tries.\")\n</code></pre> <p><code>break</code> stops the loop even if the condition is still <code>True</code>.</p>"},{"location":"while-loops/#4-skipping-ahead-with-continue","title":"4. Skipping Ahead with <code>continue</code>","text":"<pre><code>num = 0\n\nwhile num &lt; 10:\n    num += 1\n    if num % 2 == 0:\n        continue    # Skip even numbers\n    print(num)      # Prints only odd numbers\n</code></pre> <p><code>continue</code> jumps back to the condition check, skipping the rest of the body.</p>"},{"location":"while-loops/#quick-reference","title":"Quick Reference","text":"Keyword What It Does <code>while</code> Repeat while a condition is <code>True</code>. <code>break</code> Exit the loop immediately. <code>continue</code> Skip to the next iteration. Nested <code>if</code> Add extra decision\u2011making inside the loop. <p>Master these patterns, and you\u2019ll handle most looping tasks in Python with confidence.</p>"}]}