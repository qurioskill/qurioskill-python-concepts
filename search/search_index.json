{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the QurioSkill Python Specialization Guide Welcome to your learning journey with QurioSkill's Python Specialization ! This guide is designed to help you master the core concepts of Python in a structured, beginner-friendly way. Whether you're new to programming or brushing up on your skills, this guide will walk you through Python fundamentals using clear explanations and practical examples. \ud83d\udcd8 What's Inside? This guide is organized into focused sections, each available as a separate page: Variables : Understand how to store and manage data. Data Types : Learn about integers, floats, strings, and booleans\u2014plus the operators used with each. Functions : Discover how to create reusable blocks of code for cleaner, more efficient programming. \ud83d\ude80 How to Use This Guide Start from the top : Each topic builds on the previous one, so it\u2019s best to go in order. Try the examples : Copy and run the code in your own Python environment (like replit.com , VS Code, or Jupyter Notebooks). Take notes : Write down what each example does and test your understanding by modifying the code. Practice often : Use the concepts in your own mini-projects or practice exercises. \ud83c\udfaf Who Is This For? This guide is perfect for: - Beginners learning to code with Python - Students taking QurioSkill\u2019s Python workshops - Anyone looking for a quick refresher on Python basics \ud83e\udde0 What Will You Learn? By the end of this guide, you\u2019ll be able to: - Declare and manipulate variables - Understand and apply Python data types - Write and use your own functions - Build a strong foundation for advanced Python topics About QurioSkill At QurioSkill , our mission is to deliver exceptional skill-learning experiences that seamlessly integrate into even the busiest of lives. Our Python Specialization is part of that commitment\u2014designed to be clear, concise, and practical for learners across the globe. Ready to start? Begin with the Variables section!","title":"Home"},{"location":"#welcome-to-the-qurioskill-python-specialization-guide","text":"Welcome to your learning journey with QurioSkill's Python Specialization ! This guide is designed to help you master the core concepts of Python in a structured, beginner-friendly way. Whether you're new to programming or brushing up on your skills, this guide will walk you through Python fundamentals using clear explanations and practical examples.","title":"Welcome to the QurioSkill Python Specialization Guide"},{"location":"#whats-inside","text":"This guide is organized into focused sections, each available as a separate page: Variables : Understand how to store and manage data. Data Types : Learn about integers, floats, strings, and booleans\u2014plus the operators used with each. Functions : Discover how to create reusable blocks of code for cleaner, more efficient programming.","title":"\ud83d\udcd8 What's Inside?"},{"location":"#how-to-use-this-guide","text":"Start from the top : Each topic builds on the previous one, so it\u2019s best to go in order. Try the examples : Copy and run the code in your own Python environment (like replit.com , VS Code, or Jupyter Notebooks). Take notes : Write down what each example does and test your understanding by modifying the code. Practice often : Use the concepts in your own mini-projects or practice exercises.","title":"\ud83d\ude80 How to Use This Guide"},{"location":"#who-is-this-for","text":"This guide is perfect for: - Beginners learning to code with Python - Students taking QurioSkill\u2019s Python workshops - Anyone looking for a quick refresher on Python basics","title":"\ud83c\udfaf Who Is This For?"},{"location":"#what-will-you-learn","text":"By the end of this guide, you\u2019ll be able to: - Declare and manipulate variables - Understand and apply Python data types - Write and use your own functions - Build a strong foundation for advanced Python topics","title":"\ud83e\udde0 What Will You Learn?"},{"location":"#about-qurioskill","text":"At QurioSkill , our mission is to deliver exceptional skill-learning experiences that seamlessly integrate into even the busiest of lives. Our Python Specialization is part of that commitment\u2014designed to be clear, concise, and practical for learners across the globe. Ready to start? Begin with the Variables section!","title":"About QurioSkill"},{"location":"data-types/","text":"Python Data Types: int, float, str, bool Python has several built-in data types. This guide focuses on four fundamental types: int (Integer) float (Floating-point number) str (String) bool (Boolean) We'll also explore common operators used with each type. 1. Integer ( int ) Integers are whole numbers, positive or negative, without decimals. a = 10 b = -5 Common Operators with Integers Operator Description Example Result + Addition 5 + 3 8 - Subtraction 5 - 2 3 * Multiplication 4 * 3 12 / Division 10 / 2 5.0 // Floor Division 10 // 3 3 % Modulus (remainder) 10 % 3 1 ** Exponentiation 2 ** 3 8 2. Float ( float ) Floats represent real numbers with decimal points. pi = 3.14159 height = 5.7 Common Operators with Floats Floats support all the same operators as integers: Operator Description Example Result + Addition 2.5 + 1.5 4.0 - Subtraction 5.5 - 2.0 3.5 * Multiplication 2.0 * 3.5 7.0 / Division 7.0 / 2.0 3.5 // Floor Division 7.5 // 2.0 3.0 % Modulus 7.5 % 2.0 1.5 ** Exponentiation 3.0 ** 2 9.0 3. String ( str ) Strings are sequences of characters enclosed in quotes. name = \"Alice\" greeting = 'Hello' Common Operators with Strings Operator Description Example Result + Concatenation \"Hi \" + \"there\" \"Hi there\" * Repetition \"ha\" * 3 \"hahaha\" in Membership \"a\" in \"banana\" True not in Not membership \"z\" not in \"banana\" True String Indexing and Slicing: text = \"Python\" print(text[0]) # 'P' print(text[1:4]) # 'yth' 4. Boolean ( bool ) Booleans represent truth values: True or False . is_active = True is_admin = False Common Boolean Operators Operator Description Example Result and Logical AND True and False False or Logical OR True or False True not Logical NOT not True False Comparison Operators These operators return boolean values and are often used with all data types: Operator Description Example Result == Equal to 5 == 5 True != Not equal to 5 != 3 True > Greater than 7 > 3 True < Less than 2 < 1 False >= Greater or equal 3 >= 3 True <= Less or equal 2 <= 5 True Summary Data Type Description int Whole numbers float Decimal numbers str Text enclosed in quotes bool Logical values: True or False Understanding these basic types and their operators is essential for writing effective Python code.","title":"Data Types"},{"location":"data-types/#python-data-types-int-float-str-bool","text":"Python has several built-in data types. This guide focuses on four fundamental types: int (Integer) float (Floating-point number) str (String) bool (Boolean) We'll also explore common operators used with each type.","title":"Python Data Types: int, float, str, bool"},{"location":"data-types/#1-integer-int","text":"Integers are whole numbers, positive or negative, without decimals. a = 10 b = -5","title":"1. Integer (int)"},{"location":"data-types/#common-operators-with-integers","text":"Operator Description Example Result + Addition 5 + 3 8 - Subtraction 5 - 2 3 * Multiplication 4 * 3 12 / Division 10 / 2 5.0 // Floor Division 10 // 3 3 % Modulus (remainder) 10 % 3 1 ** Exponentiation 2 ** 3 8","title":"Common Operators with Integers"},{"location":"data-types/#2-float-float","text":"Floats represent real numbers with decimal points. pi = 3.14159 height = 5.7","title":"2. Float (float)"},{"location":"data-types/#common-operators-with-floats","text":"Floats support all the same operators as integers: Operator Description Example Result + Addition 2.5 + 1.5 4.0 - Subtraction 5.5 - 2.0 3.5 * Multiplication 2.0 * 3.5 7.0 / Division 7.0 / 2.0 3.5 // Floor Division 7.5 // 2.0 3.0 % Modulus 7.5 % 2.0 1.5 ** Exponentiation 3.0 ** 2 9.0","title":"Common Operators with Floats"},{"location":"data-types/#3-string-str","text":"Strings are sequences of characters enclosed in quotes. name = \"Alice\" greeting = 'Hello'","title":"3. String (str)"},{"location":"data-types/#common-operators-with-strings","text":"Operator Description Example Result + Concatenation \"Hi \" + \"there\" \"Hi there\" * Repetition \"ha\" * 3 \"hahaha\" in Membership \"a\" in \"banana\" True not in Not membership \"z\" not in \"banana\" True String Indexing and Slicing: text = \"Python\" print(text[0]) # 'P' print(text[1:4]) # 'yth'","title":"Common Operators with Strings"},{"location":"data-types/#4-boolean-bool","text":"Booleans represent truth values: True or False . is_active = True is_admin = False","title":"4. Boolean (bool)"},{"location":"data-types/#common-boolean-operators","text":"Operator Description Example Result and Logical AND True and False False or Logical OR True or False True not Logical NOT not True False","title":"Common Boolean Operators"},{"location":"data-types/#comparison-operators","text":"These operators return boolean values and are often used with all data types: Operator Description Example Result == Equal to 5 == 5 True != Not equal to 5 != 3 True > Greater than 7 > 3 True < Less than 2 < 1 False >= Greater or equal 3 >= 3 True <= Less or equal 2 <= 5 True","title":"Comparison Operators"},{"location":"data-types/#summary","text":"Data Type Description int Whole numbers float Decimal numbers str Text enclosed in quotes bool Logical values: True or False Understanding these basic types and their operators is essential for writing effective Python code.","title":"Summary"},{"location":"functions/","text":"Python Functions Functions are reusable blocks of code that perform a specific task. They help organize code, reduce repetition, and improve readability. What is a Function? A function is a named sequence of statements that performs a computation. You define a function once and can use it as many times as needed. Defining a Function def greet(): print(\"Hello, world!\") Calling a Function greet() # Output: Hello, world! Why Use Functions? Reusability : Write code once and use it multiple times. Organization : Break programs into smaller, manageable parts. Maintainability : Easier to debug and update code. Avoid Repetition : Reduces duplicate code. Function with Parameters Functions can accept inputs, known as parameters . def greet(name): print(f\"Hello, {name}!\") Example: greet(\"Alice\") # Output: Hello, Alice! greet(\"Bob\") # Output: Hello, Bob! Function with Return Value Functions can return values using the return statement. def add(a, b): return a + b Example: result = add(3, 4) print(result) # Output: 7 Default Parameters You can provide default values for parameters. def greet(name=\"Guest\"): print(f\"Hello, {name}!\") Example: greet() # Output: Hello, Guest! greet(\"Diana\") # Output: Hello, Diana! Keyword and Positional Arguments Python supports both positional and keyword arguments. def describe_pet(animal, name): print(f\"I have a {animal} named {name}.\") Example: describe_pet(\"dog\", \"Buddy\") # Positional describe_pet(name=\"Whiskers\", animal=\"cat\") # Keyword Returning Multiple Values Functions can return multiple values as a tuple. def get_coordinates(): x = 5 y = 10 return x, y a, b = get_coordinates() print(a, b) # Output: 5 10 Scope of Variables Variables defined inside a function are local to that function. def example(): local_var = \"I am local\" print(local_var) example() # print(local_var) # This would raise an error Summary Feature Description def keyword Used to define a function return statement Sends a result back to the caller Parameters Input values passed to a function Default values Optional values for parameters Reusability Functions reduce code duplication Scope Local vs Global variable access Understanding how to write and use functions is crucial for building efficient and modular Python programs.","title":"Functions"},{"location":"functions/#python-functions","text":"Functions are reusable blocks of code that perform a specific task. They help organize code, reduce repetition, and improve readability.","title":"Python Functions"},{"location":"functions/#what-is-a-function","text":"A function is a named sequence of statements that performs a computation. You define a function once and can use it as many times as needed.","title":"What is a Function?"},{"location":"functions/#defining-a-function","text":"def greet(): print(\"Hello, world!\")","title":"Defining a Function"},{"location":"functions/#calling-a-function","text":"greet() # Output: Hello, world!","title":"Calling a Function"},{"location":"functions/#why-use-functions","text":"Reusability : Write code once and use it multiple times. Organization : Break programs into smaller, manageable parts. Maintainability : Easier to debug and update code. Avoid Repetition : Reduces duplicate code.","title":"Why Use Functions?"},{"location":"functions/#function-with-parameters","text":"Functions can accept inputs, known as parameters . def greet(name): print(f\"Hello, {name}!\")","title":"Function with Parameters"},{"location":"functions/#example","text":"greet(\"Alice\") # Output: Hello, Alice! greet(\"Bob\") # Output: Hello, Bob!","title":"Example:"},{"location":"functions/#function-with-return-value","text":"Functions can return values using the return statement. def add(a, b): return a + b","title":"Function with Return Value"},{"location":"functions/#example_1","text":"result = add(3, 4) print(result) # Output: 7","title":"Example:"},{"location":"functions/#default-parameters","text":"You can provide default values for parameters. def greet(name=\"Guest\"): print(f\"Hello, {name}!\")","title":"Default Parameters"},{"location":"functions/#example_2","text":"greet() # Output: Hello, Guest! greet(\"Diana\") # Output: Hello, Diana!","title":"Example:"},{"location":"functions/#keyword-and-positional-arguments","text":"Python supports both positional and keyword arguments. def describe_pet(animal, name): print(f\"I have a {animal} named {name}.\")","title":"Keyword and Positional Arguments"},{"location":"functions/#example_3","text":"describe_pet(\"dog\", \"Buddy\") # Positional describe_pet(name=\"Whiskers\", animal=\"cat\") # Keyword","title":"Example:"},{"location":"functions/#returning-multiple-values","text":"Functions can return multiple values as a tuple. def get_coordinates(): x = 5 y = 10 return x, y a, b = get_coordinates() print(a, b) # Output: 5 10","title":"Returning Multiple Values"},{"location":"functions/#scope-of-variables","text":"Variables defined inside a function are local to that function. def example(): local_var = \"I am local\" print(local_var) example() # print(local_var) # This would raise an error","title":"Scope of Variables"},{"location":"functions/#summary","text":"Feature Description def keyword Used to define a function return statement Sends a result back to the caller Parameters Input values passed to a function Default values Optional values for parameters Reusability Functions reduce code duplication Scope Local vs Global variable access Understanding how to write and use functions is crucial for building efficient and modular Python programs.","title":"Summary"},{"location":"variables/","text":"Python Variables Variables are one of the most fundamental concepts in Python programming. They are used to store data that can be used and changed throughout your program. What is a Variable? A variable is a name that refers to a value. Think of it as a labeled box where you can store information to use later. age = 25 name = \"Alice\" temperature = 36.6 In the examples above: - age is storing an integer. - name is storing a string. - temperature is storing a float (decimal number). Rules for Naming Variables Python has a few rules and guidelines for naming variables: Must start with a letter (a\u2013z, A\u2013Z) or an underscore _ . Can only contain letters, numbers, and underscores. Cannot use Python keywords like if , class , or while . Variable names are case-sensitive ( Name and name are different). Valid examples: student_name = \"Bob\" _age = 30 total3 = 45 Invalid examples: 3total = 100 # Starts with a number class = \"Math\" # 'class' is a reserved keyword student-name = \"Sam\" # Contains a hyphen Data Types Variables can hold different types of data. Some common ones are: Type Example Integer x = 10 Float pi = 3.14 String name = \"Charlie\" Boolean is_sunny = True List fruits = [\"apple\", \"banana\"] Dictionary student = {\"name\": \"Anna\", \"age\": 21} Python automatically detects the type of data you assign to a variable. Changing Values You can reassign a new value to a variable at any time. score = 90 score = 95 # score now holds 95 Multiple Assignments Python allows you to assign values to multiple variables in one line. x, y, z = 1, 2, 3 You can also assign the same value to multiple variables: a = b = c = 0 Using Variables in Expressions Variables can be used in calculations and expressions. a = 10 b = 5 result = a + b # result is 15 The type() Function Use type() to find out the type of value a variable holds: x = 5 print(type(x)) # Output: <class 'int'> Summary Variables store data values. Python automatically infers the type of the variable. Follow naming rules for clean, readable code. Use variables to hold, update, and manipulate data.","title":"Variables"},{"location":"variables/#python-variables","text":"Variables are one of the most fundamental concepts in Python programming. They are used to store data that can be used and changed throughout your program.","title":"Python Variables"},{"location":"variables/#what-is-a-variable","text":"A variable is a name that refers to a value. Think of it as a labeled box where you can store information to use later. age = 25 name = \"Alice\" temperature = 36.6 In the examples above: - age is storing an integer. - name is storing a string. - temperature is storing a float (decimal number).","title":"What is a Variable?"},{"location":"variables/#rules-for-naming-variables","text":"Python has a few rules and guidelines for naming variables: Must start with a letter (a\u2013z, A\u2013Z) or an underscore _ . Can only contain letters, numbers, and underscores. Cannot use Python keywords like if , class , or while . Variable names are case-sensitive ( Name and name are different). Valid examples: student_name = \"Bob\" _age = 30 total3 = 45 Invalid examples: 3total = 100 # Starts with a number class = \"Math\" # 'class' is a reserved keyword student-name = \"Sam\" # Contains a hyphen","title":"Rules for Naming Variables"},{"location":"variables/#data-types","text":"Variables can hold different types of data. Some common ones are: Type Example Integer x = 10 Float pi = 3.14 String name = \"Charlie\" Boolean is_sunny = True List fruits = [\"apple\", \"banana\"] Dictionary student = {\"name\": \"Anna\", \"age\": 21} Python automatically detects the type of data you assign to a variable.","title":"Data Types"},{"location":"variables/#changing-values","text":"You can reassign a new value to a variable at any time. score = 90 score = 95 # score now holds 95","title":"Changing Values"},{"location":"variables/#multiple-assignments","text":"Python allows you to assign values to multiple variables in one line. x, y, z = 1, 2, 3 You can also assign the same value to multiple variables: a = b = c = 0","title":"Multiple Assignments"},{"location":"variables/#using-variables-in-expressions","text":"Variables can be used in calculations and expressions. a = 10 b = 5 result = a + b # result is 15","title":"Using Variables in Expressions"},{"location":"variables/#the-type-function","text":"Use type() to find out the type of value a variable holds: x = 5 print(type(x)) # Output: <class 'int'>","title":"The type() Function"},{"location":"variables/#summary","text":"Variables store data values. Python automatically infers the type of the variable. Follow naming rules for clean, readable code. Use variables to hold, update, and manipulate data.","title":"Summary"}]}