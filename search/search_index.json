{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the QurioSkill Python Specialization Guide","text":"<p>Welcome to your learning journey with QurioSkill's Python Specialization! This guide is designed to help you master the core concepts of Python in a structured, beginner-friendly way.</p> <p>Whether you're new to programming or brushing up on your skills, this guide will walk you through Python fundamentals using clear explanations and practical examples.</p>"},{"location":"#whats-inside","title":"\ud83d\udcd8 What's Inside?","text":"<p>This guide is organized into focused sections, each available as a separate page:</p> <ul> <li>Variables: Understand how to store and manage data.</li> <li>Data Types: Learn about integers, floats, strings, and booleans\u2014plus the operators used with each.</li> <li>Functions: Discover how to create reusable blocks of code for cleaner, more efficient programming.</li> </ul>"},{"location":"#how-to-use-this-guide","title":"\ud83d\ude80 How to Use This Guide","text":"<ul> <li>Start from the top: Each topic builds on the previous one, so it\u2019s best to go in order.</li> <li>Try the examples: Copy and run the code in your own Python environment (like replit.com, VS Code, or Jupyter Notebooks).</li> <li>Take notes: Write down what each example does and test your understanding by modifying the code.</li> <li>Practice often: Use the concepts in your own mini-projects or practice exercises.</li> </ul>"},{"location":"#who-is-this-for","title":"\ud83c\udfaf Who Is This For?","text":"<p>This guide is perfect for: - Beginners learning to code with Python - Students taking QurioSkill\u2019s Python workshops - Anyone looking for a quick refresher on Python basics</p>"},{"location":"#what-will-you-learn","title":"\ud83e\udde0 What Will You Learn?","text":"<p>By the end of this guide, you\u2019ll be able to: - Declare and manipulate variables - Understand and apply Python data types - Write and use your own functions - Build a strong foundation for advanced Python topics</p>"},{"location":"#about-qurioskill","title":"About QurioSkill","text":"<p>At QurioSkill, our mission is to deliver exceptional skill-learning experiences that seamlessly integrate into even the busiest of lives. Our Python Specialization is part of that commitment\u2014designed to be clear, concise, and practical for learners across the globe.</p> <p>Ready to start? Begin with the Variables section!</p>"},{"location":"common-functions/","title":"Commonly Used Python Functions","text":"<p>Python includes many built-in functions that make coding easier. Here's a list of some of the most useful functions for beginners, with examples of how to use them.</p>"},{"location":"common-functions/#1-print","title":"1. <code>print()</code>","text":"<p>Displays output to the screen.</p> <pre><code>print(\"Hello, world!\")\n</code></pre>"},{"location":"common-functions/#2-len","title":"2. <code>len()</code>","text":"<p>Returns the number of items in a string, list, tuple, or other collection.</p> <pre><code>name = \"Python\"\nprint(len(name))  # Output: 6\n</code></pre>"},{"location":"common-functions/#3-type","title":"3. <code>type()</code>","text":"<p>Returns the type of a variable or value.</p> <pre><code>x = 10\nprint(type(x))  # Output: &lt;class 'int'&gt;\n</code></pre>"},{"location":"common-functions/#4-input","title":"4. <code>input()</code>","text":"<p>Takes input from the user as a string.</p> <pre><code>name = input(\"Enter your name: \")\nprint(\"Hello, \" + name)\n</code></pre>"},{"location":"common-functions/#5-int-float-str","title":"5. <code>int()</code>, <code>float()</code>, <code>str()</code>","text":"<p>Convert values between different types.</p> <pre><code>num_str = \"42\"\nnum = int(num_str)     # Converts to integer\npi = float(\"3.14\")     # Converts to float\nscore = str(99)        # Converts to string\n</code></pre>"},{"location":"common-functions/#6-max-and-min","title":"6. <code>max()</code> and <code>min()</code>","text":"<p>Returns the largest or smallest item from a list or set of values.</p> <pre><code>numbers = [3, 7, 2, 9]\nprint(max(numbers))  # Output: 9\nprint(min(numbers))  # Output: 2\n</code></pre>"},{"location":"common-functions/#7-sum","title":"7. <code>sum()</code>","text":"<p>Returns the total of all values in a list.</p> <pre><code>scores = [10, 20, 30]\nprint(sum(scores))  # Output: 60\n</code></pre>"},{"location":"common-functions/#8-range","title":"8. <code>range()</code>","text":"<p>Generates a sequence of numbers. Commonly used in loops.</p> <pre><code>for i in range(5):\n    print(i)\n# Output: 0 1 2 3 4\n</code></pre>"},{"location":"common-functions/#9-round","title":"9. <code>round()</code>","text":"<p>Rounds a float to the nearest integer or to a given number of decimal places.</p> <pre><code>print(round(3.14159))      # Output: 3\nprint(round(3.14159, 2))   # Output: 3.14\n</code></pre>"},{"location":"common-functions/#10-sorted","title":"10. <code>sorted()</code>","text":"<p>Returns a new sorted list from the items in an iterable.</p> <pre><code>numbers = [5, 3, 8, 1]\nprint(sorted(numbers))  # Output: [1, 3, 5, 8]\n</code></pre>"},{"location":"common-functions/#summary-table","title":"Summary Table","text":"Function Description <code>print()</code> Display output <code>len()</code> Get length of a string or collection <code>type()</code> Check data type <code>input()</code> Take user input <code>int()</code>, <code>float()</code>, <code>str()</code> Convert between types <code>max()</code>, <code>min()</code> Get max/min value <code>sum()</code> Add all items in a list <code>range()</code> Generate a sequence of numbers <code>round()</code> Round numbers <code>sorted()</code> Sort a list or iterable <p>These functions form a solid foundation for writing basic Python programs. Practice using them often!</p>"},{"location":"data-types/","title":"Python Data Types: int, float, str, bool","text":"<p>Python has several built-in data types. This guide focuses on four fundamental types:</p> <ul> <li><code>int</code> (Integer)</li> <li><code>float</code> (Floating-point number)</li> <li><code>str</code> (String)</li> <li><code>bool</code> (Boolean)</li> </ul> <p>We'll also explore common operators used with each type.</p>"},{"location":"data-types/#1-integer-int","title":"1. Integer (<code>int</code>)","text":"<p>Integers are whole numbers, positive or negative, without decimals.</p> <pre><code>a = 10\nb = -5\n</code></pre>"},{"location":"data-types/#common-operators-with-integers","title":"Common Operators with Integers","text":"Operator Description Example Result <code>+</code> Addition <code>5 + 3</code> <code>8</code> <code>-</code> Subtraction <code>5 - 2</code> <code>3</code> <code>*</code> Multiplication <code>4 * 3</code> <code>12</code> <code>/</code> Division <code>10 / 2</code> <code>5.0</code> <code>//</code> Floor Division <code>10 // 3</code> <code>3</code> <code>%</code> Modulus (remainder) <code>10 % 3</code> <code>1</code> <code>**</code> Exponentiation <code>2 ** 3</code> <code>8</code>"},{"location":"data-types/#2-float-float","title":"2. Float (<code>float</code>)","text":"<p>Floats represent real numbers with decimal points.</p> <pre><code>pi = 3.14159\nheight = 5.7\n</code></pre>"},{"location":"data-types/#common-operators-with-floats","title":"Common Operators with Floats","text":"<p>Floats support all the same operators as integers:</p> Operator Description Example Result <code>+</code> Addition <code>2.5 + 1.5</code> <code>4.0</code> <code>-</code> Subtraction <code>5.5 - 2.0</code> <code>3.5</code> <code>*</code> Multiplication <code>2.0 * 3.5</code> <code>7.0</code> <code>/</code> Division <code>7.0 / 2.0</code> <code>3.5</code> <code>//</code> Floor Division <code>7.5 // 2.0</code> <code>3.0</code> <code>%</code> Modulus <code>7.5 % 2.0</code> <code>1.5</code> <code>**</code> Exponentiation <code>3.0 ** 2</code> <code>9.0</code>"},{"location":"data-types/#3-string-str","title":"3. String (<code>str</code>)","text":"<p>Strings are sequences of characters enclosed in quotes.</p> <pre><code>name = \"Alice\"\ngreeting = 'Hello'\n</code></pre>"},{"location":"data-types/#common-operators-with-strings","title":"Common Operators with Strings","text":"Operator Description Example Result <code>+</code> Concatenation <code>\"Hi \" + \"there\"</code> <code>\"Hi there\"</code> <code>*</code> Repetition <code>\"ha\" * 3</code> <code>\"hahaha\"</code> <code>in</code> Membership <code>\"a\" in \"banana\"</code> <code>True</code> <code>not in</code> Not membership <code>\"z\" not in \"banana\"</code> <code>True</code> <p>String Indexing and Slicing:</p> <pre><code>text = \"Python\"\nprint(text[0])      # 'P'\nprint(text[1:4])    # 'yth'\n</code></pre>"},{"location":"data-types/#4-boolean-bool","title":"4. Boolean (<code>bool</code>)","text":"<p>Booleans represent truth values: <code>True</code> or <code>False</code>.</p> <pre><code>is_active = True\nis_admin = False\n</code></pre>"},{"location":"data-types/#common-boolean-operators","title":"Common Boolean Operators","text":"Operator Description Example Result <code>and</code> Logical AND <code>True and False</code> <code>False</code> <code>or</code> Logical OR <code>True or False</code> <code>True</code> <code>not</code> Logical NOT <code>not True</code> <code>False</code>"},{"location":"data-types/#comparison-operators","title":"Comparison Operators","text":"<p>These operators return boolean values and are often used with all data types:</p> Operator Description Example Result <code>==</code> Equal to <code>5 == 5</code> <code>True</code> <code>!=</code> Not equal to <code>5 != 3</code> <code>True</code> <code>&gt;</code> Greater than <code>7 &gt; 3</code> <code>True</code> <code>&lt;</code> Less than <code>2 &lt; 1</code> <code>False</code> <code>&gt;=</code> Greater or equal <code>3 &gt;= 3</code> <code>True</code> <code>&lt;=</code> Less or equal <code>2 &lt;= 5</code> <code>True</code>"},{"location":"data-types/#summary","title":"Summary","text":"Data Type Description <code>int</code> Whole numbers <code>float</code> Decimal numbers <code>str</code> Text enclosed in quotes <code>bool</code> Logical values: <code>True</code> or <code>False</code> <p>Understanding these basic types and their operators is essential for writing effective Python code.</p>"},{"location":"functions/","title":"Python Functions","text":"<p>Functions are reusable blocks of code that perform a specific task. They help organize code, reduce repetition, and improve readability.</p>"},{"location":"functions/#what-is-a-function","title":"What is a Function?","text":"<p>A function is a named sequence of statements that performs a computation. You define a function once and can use it as many times as needed.</p>"},{"location":"functions/#defining-a-function","title":"Defining a Function","text":"<pre><code>def greet():\n    print(\"Hello, world!\")\n</code></pre>"},{"location":"functions/#calling-a-function","title":"Calling a Function","text":"<pre><code>greet()  # Output: Hello, world!\n</code></pre>"},{"location":"functions/#why-use-functions","title":"Why Use Functions?","text":"<ul> <li>Reusability: Write code once and use it multiple times.</li> <li>Organization: Break programs into smaller, manageable parts.</li> <li>Maintainability: Easier to debug and update code.</li> <li>Avoid Repetition: Reduces duplicate code.</li> </ul>"},{"location":"functions/#function-with-parameters","title":"Function with Parameters","text":"<p>Functions can accept inputs, known as parameters.</p> <pre><code>def greet(name):\n    print(f\"Hello, {name}!\")\n</code></pre>"},{"location":"functions/#example","title":"Example:","text":"<pre><code>greet(\"Alice\")   # Output: Hello, Alice!\ngreet(\"Bob\")     # Output: Hello, Bob!\n</code></pre>"},{"location":"functions/#function-with-return-value","title":"Function with Return Value","text":"<p>Functions can return values using the <code>return</code> statement.</p> <pre><code>def add(a, b):\n    return a + b\n</code></pre>"},{"location":"functions/#example_1","title":"Example:","text":"<pre><code>result = add(3, 4)\nprint(result)    # Output: 7\n</code></pre>"},{"location":"functions/#default-parameters","title":"Default Parameters","text":"<p>You can provide default values for parameters.</p> <pre><code>def greet(name=\"Guest\"):\n    print(f\"Hello, {name}!\")\n</code></pre>"},{"location":"functions/#example_2","title":"Example:","text":"<pre><code>greet()           # Output: Hello, Guest!\ngreet(\"Diana\")    # Output: Hello, Diana!\n</code></pre>"},{"location":"functions/#keyword-and-positional-arguments","title":"Keyword and Positional Arguments","text":"<p>Python supports both positional and keyword arguments.</p> <pre><code>def describe_pet(animal, name):\n    print(f\"I have a {animal} named {name}.\")\n</code></pre>"},{"location":"functions/#example_3","title":"Example:","text":"<pre><code>describe_pet(\"dog\", \"Buddy\")                   # Positional\ndescribe_pet(name=\"Whiskers\", animal=\"cat\")    # Keyword\n</code></pre>"},{"location":"functions/#returning-multiple-values","title":"Returning Multiple Values","text":"<p>Functions can return multiple values as a tuple.</p> <pre><code>def get_coordinates():\n    x = 5\n    y = 10\n    return x, y\n\na, b = get_coordinates()\nprint(a, b)  # Output: 5 10\n</code></pre>"},{"location":"functions/#scope-of-variables","title":"Scope of Variables","text":"<p>Variables defined inside a function are local to that function.</p> <pre><code>def example():\n    local_var = \"I am local\"\n    print(local_var)\n\nexample()\n# print(local_var)  # This would raise an error\n</code></pre>"},{"location":"functions/#summary","title":"Summary","text":"Feature Description <code>def</code> keyword Used to define a function <code>return</code> statement Sends a result back to the caller Parameters Input values passed to a function Default values Optional values for parameters Reusability Functions reduce code duplication Scope Local vs Global variable access <p>Understanding how to write and use functions is crucial for building efficient and modular Python programs.</p>"},{"location":"variables/","title":"Python Variables","text":"<p>Variables are one of the most fundamental concepts in Python programming. They are used to store data that can be used and changed throughout your program.</p>"},{"location":"variables/#what-is-a-variable","title":"What is a Variable?","text":"<p>A variable is a name that refers to a value. Think of it as a labeled box where you can store information to use later.</p> <pre><code>age = 25\nname = \"Alice\"\ntemperature = 36.6\n</code></pre> <p>In the examples above: - <code>age</code> is storing an integer. - <code>name</code> is storing a string. - <code>temperature</code> is storing a float (decimal number).</p>"},{"location":"variables/#rules-for-naming-variables","title":"Rules for Naming Variables","text":"<p>Python has a few rules and guidelines for naming variables:</p> <ul> <li>Must start with a letter (a\u2013z, A\u2013Z) or an underscore <code>_</code>.</li> <li>Can only contain letters, numbers, and underscores.</li> <li>Cannot use Python keywords like <code>if</code>, <code>class</code>, or <code>while</code>.</li> <li>Variable names are case-sensitive (<code>Name</code> and <code>name</code> are different).</li> </ul> <p>Valid examples:</p> <pre><code>student_name = \"Bob\"\n_age = 30\ntotal3 = 45\n</code></pre> <p>Invalid examples:</p> <pre><code>3total = 100       # Starts with a number\nclass = \"Math\"     # 'class' is a reserved keyword\nstudent-name = \"Sam\"  # Contains a hyphen\n</code></pre>"},{"location":"variables/#data-types","title":"Data Types","text":"<p>Variables can hold different types of data. Some common ones are:</p> Type Example Integer <code>x = 10</code> Float <code>pi = 3.14</code> String <code>name = \"Charlie\"</code> Boolean <code>is_sunny = True</code> List <code>fruits = [\"apple\", \"banana\"]</code> Dictionary <code>student = {\"name\": \"Anna\", \"age\": 21}</code> <p>Python automatically detects the type of data you assign to a variable.</p>"},{"location":"variables/#changing-values","title":"Changing Values","text":"<p>You can reassign a new value to a variable at any time.</p> <pre><code>score = 90\nscore = 95  # score now holds 95\n</code></pre>"},{"location":"variables/#multiple-assignments","title":"Multiple Assignments","text":"<p>Python allows you to assign values to multiple variables in one line.</p> <pre><code>x, y, z = 1, 2, 3\n</code></pre> <p>You can also assign the same value to multiple variables:</p> <pre><code>a = b = c = 0\n</code></pre>"},{"location":"variables/#using-variables-in-expressions","title":"Using Variables in Expressions","text":"<p>Variables can be used in calculations and expressions.</p> <pre><code>a = 10\nb = 5\nresult = a + b  # result is 15\n</code></pre>"},{"location":"variables/#the-type-function","title":"The <code>type()</code> Function","text":"<p>Use <code>type()</code> to find out the type of value a variable holds:</p> <pre><code>x = 5\nprint(type(x))  # Output: &lt;class 'int'&gt;\n</code></pre>"},{"location":"variables/#summary","title":"Summary","text":"<ul> <li>Variables store data values.</li> <li>Python automatically infers the type of the variable.</li> <li>Follow naming rules for clean, readable code.</li> <li>Use variables to hold, update, and manipulate data.</li> </ul>"}]}